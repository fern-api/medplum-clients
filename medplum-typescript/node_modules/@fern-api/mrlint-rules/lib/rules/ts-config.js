"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsConfigRule = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const path_1 = __importDefault(require("path"));
const keyPackagesByNpmName_1 = require("../utils/keyPackagesByNpmName");
const tryGetPackageJson_1 = require("../utils/tryGetPackageJson");
const writePackageFile_1 = require("../utils/writePackageFile");
exports.TsConfigRule = {
    ruleId: "ts-config",
    type: mrlint_commons_1.RuleType.PACKAGE,
    targetedPackages: [
        mrlint_commons_1.PackageType.REACT_APP,
        mrlint_commons_1.PackageType.REACT_LIBRARY,
        mrlint_commons_1.PackageType.TYPESCRIPT_LIBRARY,
        mrlint_commons_1.PackageType.TYPESCRIPT_CLI,
    ],
    run: runRule,
};
async function runRule({ fileSystems, relativePathToSharedConfigs, packageToLint, allPackages, logger, }) {
    let tsConfig;
    try {
        tsConfig = await generateTsConfig({
            packageToLint,
            allPackages,
            relativePathToSharedConfigs,
            logger,
        });
    }
    catch (error) {
        logger.error({
            message: "Failed to generate TS Config",
            error,
        });
        return mrlint_commons_1.Result.failure();
    }
    return (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystems.getFileSystemForPackage(packageToLint),
        filename: "tsconfig.json",
        contents: JSON.stringify(tsConfig),
        logger,
    });
}
async function generateTsConfig({ packageToLint, allPackages, relativePathToSharedConfigs, logger, }) {
    const packageJson = (0, tryGetPackageJson_1.tryGetPackageJson)(packageToLint, logger);
    if (packageJson == null) {
        throw new Error("package.json does not exist");
    }
    const packagesByNpmName = (0, keyPackagesByNpmName_1.keyPackagesByNpmName)(allPackages);
    return {
        extends: path_1.default.join(relativePathToSharedConfigs, "tsconfig.shared.json"),
        compilerOptions: {
            composite: true,
            outDir: "./lib",
            rootDir: "src",
            module: "CommonJS",
        },
        include: ["./src"],
        references: Object.entries(Object.assign(Object.assign({}, packageJson.dependencies), packageJson.devDependencies))
            .reduce((acc, [dependency, version]) => {
            if (version.startsWith("workspace:")) {
                const packageOfDependency = packagesByNpmName[dependency];
                if (packageOfDependency == null) {
                    throw new Error("Workspace dependency not found: " + dependency);
                }
                acc.push(path_1.default.relative(packageToLint.relativePath, packageOfDependency.relativePath));
            }
            return acc;
        }, [])
            .sort()
            .map((path) => ({ path })),
    };
}
//# sourceMappingURL=ts-config.js.map