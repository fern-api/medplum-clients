"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JestRule = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const path_1 = __importDefault(require("path"));
const tryGetPackageJson_1 = require("../utils/tryGetPackageJson");
const writePackageFile_1 = require("../utils/writePackageFile");
exports.JestRule = {
    ruleId: "jest",
    type: mrlint_commons_1.RuleType.PACKAGE,
    targetedPackages: [
        mrlint_commons_1.PackageType.REACT_APP,
        mrlint_commons_1.PackageType.REACT_LIBRARY,
        mrlint_commons_1.PackageType.TYPESCRIPT_LIBRARY,
        mrlint_commons_1.PackageType.TYPESCRIPT_CLI,
    ],
    run: runRule,
};
const EXPECTED_DEV_DEPENDENCIES = [
    "jest",
    "@types/jest",
    "@babel/core",
    "@babel/preset-env",
    "@babel/preset-typescript",
];
async function runRule({ fileSystems, packageToLint, relativePathToSharedConfigs, logger, addDevDependency, }) {
    const result = mrlint_commons_1.Result.success();
    result.accumulate(await (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystems.getFileSystemForPackage(packageToLint),
        filename: "jest.config.js",
        contents: `module.exports = {
    ...require("${path_1.default.join(relativePathToSharedConfigs, "jest.config.shared.json")}"),
        };`,
        logger,
    }));
    result.accumulate(await (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystems.getFileSystemForPackage(packageToLint),
        filename: "babel.config.js",
        contents: `module.exports = {
    presets: [["@babel/preset-env", { targets: { node: "current" } }], "@babel/preset-typescript"],
        };`,
        logger,
    }));
    const packageJson = (0, tryGetPackageJson_1.tryGetPackageJson)(packageToLint, logger);
    if (packageJson == null) {
        result.fail();
    }
    else {
        for (const dependency of EXPECTED_DEV_DEPENDENCIES) {
            addDevDependency(dependency);
        }
    }
    return result;
}
//# sourceMappingURL=jest.js.map