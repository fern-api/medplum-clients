"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DuplicateDependenciesRule = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
exports.DuplicateDependenciesRule = {
    ruleId: "duplicate-dependencies",
    type: mrlint_commons_1.RuleType.MONOREPO,
    run: runRule,
};
function runRule({ monorepo, logger }) {
    var _a, _b;
    const result = mrlint_commons_1.Result.success();
    const dependenciesByName = {};
    for (const p of monorepo.packages) {
        addDependencies({
            packagePath: p.relativePath,
            dependencies: (_a = p.packageJson) === null || _a === void 0 ? void 0 : _a.dependencies,
            dependenciesByName,
        });
        addDependencies({
            packagePath: p.relativePath,
            dependencies: (_b = p.packageJson) === null || _b === void 0 ? void 0 : _b.devDependencies,
            dependenciesByName,
        });
    }
    for (const [dependency, versionToPackageNames] of Object.entries(dependenciesByName)) {
        const entries = Object.entries(versionToPackageNames);
        if (entries.length > 1) {
            result.fail();
            logger.error({
                message: `Found multiple versions of ${dependency}`,
                additionalContent: entries.map(([version, packageNames]) => `${version} (${packageNames.join(", ")})`),
            });
        }
    }
    return result;
}
function addDependencies({ packagePath, dependencies, dependenciesByName, }) {
    if (dependencies == null) {
        return;
    }
    for (const [dependency, version] of Object.entries(dependencies)) {
        let depsForPackage = dependenciesByName[dependency];
        if (depsForPackage == null) {
            depsForPackage = {};
            dependenciesByName[dependency] = depsForPackage;
        }
        let packagesForVersion = depsForPackage[version];
        if (packagesForVersion == null) {
            packagesForVersion = [];
            depsForPackage[version] = packagesForVersion;
        }
        packagesForVersion.push(packagePath);
    }
}
//# sourceMappingURL=duplicate-dependencies.js.map