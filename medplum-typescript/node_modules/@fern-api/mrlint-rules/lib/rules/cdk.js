"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdkRule = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const path_1 = __importDefault(require("path"));
const tryGetPackageJson_1 = require("../utils/tryGetPackageJson");
const writePackageFile_1 = require("../utils/writePackageFile");
exports.CdkRule = {
    ruleId: "package-json",
    type: mrlint_commons_1.RuleType.PACKAGE,
    targetedPackages: [mrlint_commons_1.PackageType.REACT_APP],
    run: runRule,
};
const DEPLOY_PATH = "deploy";
async function runRule({ fileSystems, relativePathToSharedConfigs, packageToLint, allPackages, logger, }) {
    const fileSystemForPackage = fileSystems.getFileSystemForPackage(packageToLint);
    const result = mrlint_commons_1.Result.success();
    result.accumulate(await (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystemForPackage,
        filename: "cdk.json",
        contents: JSON.stringify({
            app: "npx ts-node --prefer-ts-exts deploy/deploy.ts",
            context: {
                "@aws-cdk/aws-apigateway:usagePlanKeyOrderInsensitiveId": true,
                "@aws-cdk/core:stackRelativeExports": true,
                "@aws-cdk/aws-rds:lowercaseDbIdentifier": true,
                "@aws-cdk/aws-lambda:recognizeVersionProps": true,
                "@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021": true,
                "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": true,
                "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": true,
                "@aws-cdk/core:target-partitions": ["aws", "aws-cn"],
            },
        }),
        logger,
    }));
    result.accumulate(await writeDeployDirectory({
        packageToLint,
        allPackages,
        relativePathToSharedConfigs,
        fileSystemForPackage,
        logger,
    }));
    return mrlint_commons_1.Result.success();
}
async function writeDeployDirectory({ packageToLint, allPackages, relativePathToSharedConfigs, fileSystemForPackage, logger, }) {
    fileSystemForPackage.mkdir(DEPLOY_PATH);
    const fileSystemForDeploy = fileSystemForPackage.getFileSystemForPrefix(DEPLOY_PATH);
    const packageJson = (0, tryGetPackageJson_1.tryGetPackageJson)(packageToLint, logger);
    if (packageJson == null) {
        return mrlint_commons_1.Result.failure();
    }
    const packageName = packageJson.name;
    const result = mrlint_commons_1.Result.success();
    result.accumulate(await writeDeployTs({ packageName, fileSystemForDeploy, logger }));
    result.accumulate(await writeTsConfig({
        packageToLint,
        allPackages,
        relativePathToSharedConfigs,
        fileSystemForDeploy,
        logger,
    }));
    return result;
}
async function writeDeployTs({ packageName, fileSystemForDeploy, logger, }) {
    return (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystemForDeploy,
        filename: "deploy.ts",
        contents: `#!/usr/bin/env node

import { createCdkStack } from "@fern-api/cdk-utils";
import path from "path";

createCdkStack({
id: "${packageName}", 
bundleLocation: path.join(__dirname, ".."),
environmentToDomain: {
    STAGING: "<TODO>",
},
});`,
        logger,
    });
}
async function writeTsConfig({ packageToLint, allPackages, relativePathToSharedConfigs, fileSystemForDeploy, logger, }) {
    const cdkUtils = allPackages.find((p) => { var _a; return ((_a = p.packageJson) === null || _a === void 0 ? void 0 : _a.name) === "@fern-api/cdk-utils"; });
    if (cdkUtils == null) {
        logger.error("Could not find @fern-api/cdk-utils");
        return mrlint_commons_1.Result.failure();
    }
    const tsConfig = {
        extends: path_1.default.relative(packageToLint.relativePath, path_1.default.join(relativePathToSharedConfigs, "tsconfig.shared.json")),
        compilerOptions: { module: "CommonJS" },
        references: [
            {
                path: path_1.default.relative(packageToLint.relativePath, cdkUtils.relativePath),
            },
        ],
    };
    return (0, writePackageFile_1.writePackageFile)({
        fileSystem: fileSystemForDeploy,
        filename: "tsconfig.json",
        contents: JSON.stringify(tsConfig),
        logger,
    });
}
//# sourceMappingURL=cdk.js.map