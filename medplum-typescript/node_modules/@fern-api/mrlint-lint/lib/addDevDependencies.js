"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDevDependenciesForPackage = exports.addDevDependencies = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
async function addDevDependencies({ devDependencies, shouldFix, loggers, }) {
    var _a, _b;
    const result = mrlint_commons_1.Result.success();
    for (const [packageName, { package: p, devDependenciesToAdd }] of Object.entries(devDependencies)) {
        result.accumulate(await addDevDependenciesForPackage({
            packageName,
            devDependenciesToAdd: [...devDependenciesToAdd],
            existingDevDependencies: Object.keys(Object.assign(Object.assign({}, (_a = p.packageJson) === null || _a === void 0 ? void 0 : _a.dependencies), (_b = p.packageJson) === null || _b === void 0 ? void 0 : _b.devDependencies)),
            shouldFix,
            logger: loggers.getLoggerForPackage(p),
        }));
    }
    return result;
}
exports.addDevDependencies = addDevDependencies;
async function addDevDependenciesForPackage({ packageName, existingDevDependencies, devDependenciesToAdd, shouldFix, logger, }) {
    const existingDevDependenciesSet = new Set(existingDevDependencies);
    const filteredDependencies = [];
    for (const devDependencyToAdd of devDependenciesToAdd) {
        if (!existingDevDependenciesSet.has(devDependencyToAdd)) {
            filteredDependencies.push(devDependencyToAdd);
        }
    }
    if (filteredDependencies.length === 0) {
        return mrlint_commons_1.Result.success();
    }
    if (!shouldFix) {
        logger.error({
            message: "Some devDependencies are missing",
            additionalContent: filteredDependencies,
        });
        return mrlint_commons_1.Result.failure();
    }
    logger.debug({
        message: "Adding devDependencies",
        additionalContent: filteredDependencies,
    });
    return new Promise((resolve) => {
        (0, child_process_1.exec)(`yarn workspace ${packageName} add --prefer-dev ${filteredDependencies.join(" ")}`, (error, stdout) => {
            if (error == null) {
                logger.info({
                    message: chalk_1.default.green("Installed missing devDependencies"),
                    additionalContent: filteredDependencies,
                });
                resolve(mrlint_commons_1.Result.success());
            }
            else {
                logger.error({
                    message: "Failed to install devDependencies",
                    additionalContent: filteredDependencies,
                    error: stdout.length > 0 ? stdout : undefined,
                });
                resolve(mrlint_commons_1.Result.failure());
            }
        });
    });
}
exports.addDevDependenciesForPackage = addDevDependenciesForPackage;
//# sourceMappingURL=addDevDependencies.js.map