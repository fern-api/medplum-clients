"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = void 0;
const promises_1 = require("fs/promises");
const js_yaml_1 = __importDefault(require("js-yaml"));
const path_1 = __importDefault(require("path"));
async function readConfig(filepath, validate) {
    let contents;
    try {
        contents = await (0, promises_1.readFile)(filepath);
    }
    catch (e) {
        return undefined;
    }
    const parsed = await parse({ filepath, contents: contents.toString() });
    return validate(parsed);
}
exports.readConfig = readConfig;
async function parse({ filepath, contents }) {
    const extension = path_1.default.extname(filepath);
    switch (extension) {
        case ".json":
            return JSON.parse(contents);
        case ".yml":
            return js_yaml_1.default.load(contents);
        default:
            throw new Error(`Invalid config file extension: ${extension}`);
    }
}
//# sourceMappingURL=readConfig.js.map