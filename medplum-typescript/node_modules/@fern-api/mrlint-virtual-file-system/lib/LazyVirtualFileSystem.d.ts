import { FileSystem } from "./FileSystem";
import { FileSystemWithUtilities } from "./FileSystemWithUtilities";
export declare class LazyVirtualFileSystem implements FileSystemWithUtilities {
    private readonly rootDir;
    private root;
    constructor(rootDir: string);
    readdir(relativePath: string): Promise<Record<FileSystem.FileName, FileSystem.File>>;
    mkdir(relativePath: string): Promise<void>;
    readFile(relativePath: string): Promise<string | undefined>;
    writeFile(relativePath: string, contents: string): Promise<void>;
    getFileSystemForPrefix(prefix: string): FileSystem;
    visitTouchedFiles(visitor: (args: {
        fullPath: string;
        relativePath: string;
        contents: string;
    }) => void | Promise<void>): Promise<void>;
    getTouchedFiles(): FileSystemWithUtilities.TouchedFile[];
    clearCache(): void;
    private readdirRecursive;
    private loadChildren;
    private mkdirRecursive;
    private traverseToFile;
    private getTouchedFilesRecursive;
    private getAbsolutePath;
}
