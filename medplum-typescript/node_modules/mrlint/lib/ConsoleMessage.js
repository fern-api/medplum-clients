"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleMessage = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const chalk_1 = __importDefault(require("chalk"));
const types_1 = require("util/types");
const CHALKS = {
    [mrlint_commons_1.LogLevel.ERROR]: chalk_1.default.red,
    [mrlint_commons_1.LogLevel.WARN]: chalk_1.default.keyword("orange"),
    [mrlint_commons_1.LogLevel.INFO]: (content) => content,
    [mrlint_commons_1.LogLevel.DEBUG]: chalk_1.default.gray,
};
const LABELS = {
    [mrlint_commons_1.LogLevel.ERROR]: "ERROR",
    [mrlint_commons_1.LogLevel.WARN]: "WARN",
    [mrlint_commons_1.LogLevel.INFO]: "INFO",
    [mrlint_commons_1.LogLevel.DEBUG]: "DEBUG",
};
class ConsoleMessage {
    constructor(_a) {
        var { level, maxLevel } = _a, metadata = __rest(_a, ["level", "maxLevel"]);
        this.level = level;
        this.maxLevel = maxLevel;
        this.metadata = metadata;
    }
    print() {
        if (this.level > this.maxLevel) {
            return;
        }
        const titleParts = [];
        titleParts.push(chalk_1.default.underline(this.addColorForLevel(LABELS[this.level])));
        if (this.metadata.package != null) {
            titleParts.push(chalk_1.default.bold(this.metadata.package.relativePath));
        }
        if (this.metadata.rule != null) {
            titleParts.push(chalk_1.default.gray(`[${this.metadata.rule.ruleId}]`));
        }
        titleParts.push(this.metadata.title);
        console.group(titleParts.join(" "));
        if (this.metadata.additionalContent != null) {
            const additionalContentStr = typeof this.metadata.additionalContent === "string"
                ? this.metadata.additionalContent
                : this.metadata.additionalContent.map((x) => `- ${x}`).join("\n");
            console.log(additionalContentStr);
        }
        if (this.metadata.error != null) {
            console.log(typeof this.metadata.error === "string"
                ? this.metadata.error
                : (0, types_1.isNativeError)(this.metadata.error)
                    ? `${this.metadata.error.name} ${this.metadata.error.message}`
                    : JSON.stringify(this.metadata.error));
        }
        console.groupEnd();
    }
    addColorForLevel(x) {
        return CHALKS[this.level](x);
    }
}
exports.ConsoleMessage = ConsoleMessage;
//# sourceMappingURL=ConsoleMessage.js.map