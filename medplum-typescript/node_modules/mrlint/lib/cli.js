"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const yargs_1 = __importDefault(require("yargs"));
const lintCommand_1 = require("./commands/lintCommand");
const versionCommand_1 = require("./commands/versionCommand");
const ConsoleMonorepoLogger_1 = require("./ConsoleMonorepoLogger");
const DEFAULT_COMMAND_LINE_LOG_LEVEL = "info";
const LOG_LEVELS = {
    debug: true,
    info: true,
    warn: true,
    error: true,
};
yargs_1.default
    .scriptName("mrlint")
    .strict()
    .option("log-level", {
    default: DEFAULT_COMMAND_LINE_LOG_LEVEL,
    choices: keys(LOG_LEVELS),
})
    .command("lint", "Lint the monorepo", (argv) => argv.option("fix", {
    boolean: true,
    default: false,
}), async (argv) => {
    await (0, lintCommand_1.lintCommand)({
        loggers: new ConsoleMonorepoLogger_1.ConsoleMonorepoLogger(convertLogLevel(argv.logLevel)),
        shouldFix: argv.fix,
    });
})
    .command("version <new_version>", "Apply the provided version to all public package in the monorepo", (argv) => argv.positional("new_version", {
    type: "string",
    demandOption: true,
}), async (argv) => {
    await (0, versionCommand_1.versionCommand)({
        newVersion: argv.new_version,
    });
})
    .demandCommand()
    .showHelpOnFail(true)
    .parse();
function convertLogLevel(level) {
    switch (level) {
        case "debug":
            return mrlint_commons_1.LogLevel.DEBUG;
        case "info":
            return mrlint_commons_1.LogLevel.INFO;
        case "warn":
            return mrlint_commons_1.LogLevel.WARN;
        case "error":
            return mrlint_commons_1.LogLevel.ERROR;
    }
}
function keys(obj) {
    return Object.keys(obj);
}
//# sourceMappingURL=cli.js.map