"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionCommand = void 0;
const mrlint_commons_1 = require("@fern-api/mrlint-commons");
const mrlint_parser_1 = require("@fern-api/mrlint-parser");
const promises_1 = require("fs/promises");
const path_1 = __importDefault(require("path"));
async function versionCommand({ newVersion }) {
    const monorepo = await (0, mrlint_parser_1.parseMonorepo)();
    for (const p of monorepo.packages) {
        const { packageJson } = p;
        if (packageJson == null || packageJson.private === true) {
            return;
        }
        const { name, version } = packageJson, rest = __rest(packageJson, ["name", "version"]);
        const newPackageJson = Object.assign({ name, version: newVersion }, rest);
        const fullPath = path_1.default.join(monorepo.root.fullPath, p.relativePath, "package.json");
        const formatted = await (0, mrlint_commons_1.formatFileContents)({
            filepath: fullPath,
            fileContents: JSON.stringify(newPackageJson),
            prettierParser: undefined,
        });
        await (0, promises_1.writeFile)(fullPath, formatted);
    }
}
exports.versionCommand = versionCommand;
//# sourceMappingURL=versionCommand.js.map